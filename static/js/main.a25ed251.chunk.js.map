{"version":3,"sources":["components/Header/Header.js","components/Spinner/Spinner.js","components/Quote.js","components/ErrorMessage/ErrorMessage.js","components/ThemeList/ThemeList.js","components/QuoteBox/QuoteBox.js","components/Theme/Theme.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","title","react_default","a","createElement","className","Spinner","Quote","quote","react","id","text","author","ErrorMessage","ThemeList","onChangeTheme","activeTheme","map","color","i","key","concat","onClick","QuoteBox","onNewQuote","isFetching","isError","components_Spinner_Spinner","components_ErrorMessage_ErrorMessage","components_Quote","components_ThemeList_ThemeList","href","rel","target","type","disabled","Theme","children","theme","style","backgroundColor","Footer","App","state","error","getNewQuote","_this","setState","fetch","then","res","json","data","quoteAuthor","quoteText","catch","console","log","handleThemeColor","this","_this$state","components_Theme_Theme","components_Header_Header","components_QuoteBox_QuoteBox","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a25ed251.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = ({ title }) => (\r\n  <div className=\"header\">\r\n    <h1>{title}</h1>\r\n  </div>\r\n);\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => (\r\n  <span className=\"spinner\">\r\n    <i className=\"fas fa-spin fa-pulse fa-spinner\" />\r\n  </span>\r\n);\r\n\r\nexport default Spinner;\r\n","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Quote = ({ quote }) => (\r\n  <Fragment>\r\n    <p id=\"text\">\r\n      <span className=\"quote-content-icon\">\r\n        <i className=\"fas fa-quote-left\" />\r\n      </span>\r\n      {quote.text}\r\n    </p>\r\n    <p id=\"author\">\r\n      &mdash;<em>{quote.author}</em>\r\n    </p>\r\n  </Fragment>\r\n);\r\n\r\nQuote.propTypes = {\r\n  quote: PropTypes.shape({\r\n    text: PropTypes.string.isRequired,\r\n    author: PropTypes.string.isRequired\r\n  })\r\n};\r\n\r\nexport default Quote;\r\n","import React from 'react';\r\nimport './ErrorMessage.css';\r\n\r\nconst ErrorMessage = () => (\r\n  <div className=\"error-box\">\r\n    <span>\r\n      <i className=\"fas fa-exclamation-circle\" />\r\n    </span>\r\n    <span>Something went wrong! Please try again.</span>\r\n  </div>\r\n);\r\n\r\nexport default ErrorMessage;\r\n","import React from 'react';\r\nimport './ThemeList.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ThemeList = ({ onChangeTheme, activeTheme }) => {\r\n  const colorThemes = ['#3498db', '#9b59b6', '#e67e22', '#c0392b', '#2c3e50'];\r\n  return (\r\n    <ul className=\"theme-list\">\r\n      {colorThemes.map((color, i) => (\r\n        <li\r\n          key={color}\r\n          className={`theme-item theme-item-${i + 1} ${\r\n            activeTheme === color ? 'active-theme' : ''\r\n          }`}\r\n          onClick={() => onChangeTheme(color)}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nThemeList.propTypes = {\r\n  onChangeTheme: PropTypes.func.isRequired,\r\n  activeTheme: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ThemeList;\r\n","import React, { Fragment } from 'react';\r\nimport './QuoteBox.css';\r\nimport Spinner from '../Spinner/Spinner';\r\nimport Quote from '../Quote';\r\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\r\nimport ThemeList from '../ThemeList/ThemeList';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst QuoteBox = ({\r\n  quote,\r\n  onNewQuote,\r\n  isFetching,\r\n  isError,\r\n  onChangeTheme,\r\n  activeTheme\r\n}) => (\r\n  <Fragment>\r\n    <div className=\"quote-content\">\r\n      {isFetching && <Spinner />}\r\n      {isError && <ErrorMessage />}\r\n      <div className={isFetching || isError ? 'hide-quote' : ''}>\r\n        <Quote quote={quote} />\r\n      </div>\r\n    </div>\r\n    <ThemeList onChangeTheme={onChangeTheme} activeTheme={activeTheme} />\r\n    <div className=\"quote-controls\">\r\n      <a\r\n        href={`https://twitter.com/intent/tweet?text=${quote.text}- ${\r\n          quote.author\r\n        }`}\r\n        rel=\"noopener noreferrer\"\r\n        target=\"_blank\"\r\n        id=\"tweet-quote\"\r\n      >\r\n        <i className=\"fab fa-twitter\" /> Tweet\r\n      </a>\r\n      <button\r\n        type=\"button\"\r\n        id=\"new-quote\"\r\n        onClick={onNewQuote}\r\n        disabled={isFetching}\r\n      >\r\n        <i className=\"fab fa-telegram-plane\" /> New Quote\r\n      </button>\r\n    </div>\r\n  </Fragment>\r\n);\r\n\r\nQuoteBox.propTypes = {\r\n  quote: PropTypes.object,\r\n  onNewQuote: PropTypes.func.isRequired,\r\n  isFetching: PropTypes.bool.isRequired,\r\n  isError: PropTypes.bool.isRequired,\r\n  onChangeTheme: PropTypes.func,\r\n  activeTheme: PropTypes.string\r\n};\r\n\r\nexport default QuoteBox;\r\n","import React from 'react';\r\nimport './Theme.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Theme = ({ children, theme }) => (\r\n  <div className=\"theme\" style={{ backgroundColor: theme, color: theme }}>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nTheme.propTypes = {\r\n  children: PropTypes.node,\r\n  theme: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Theme;\r\n","import React from 'react';\r\nimport './Footer.css';\r\n\r\nconst Footer = () => (\r\n  <footer className=\"footer\">\r\n    <span>\r\n      API:{' '}\r\n      <a\r\n        className=\"footer-link\"\r\n        href=\"https://forismatic.com/en/\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        forismatic\r\n      </a>\r\n    </span>\r\n    <span>|</span>\r\n    <span>\r\n      <a\r\n        className=\"footer-link\"\r\n        href=\"https://github.com/rmasianjr/random-quote-machine\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Repo Link\r\n      </a>\r\n    </span>\r\n    <p>\r\n      Created by:{' '}\r\n      <a\r\n        className=\"footer-link\"\r\n        href=\"https://twitter.com/rmasianjr\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Ricardo Masian Jr.\r\n      </a>\r\n    </p>\r\n  </footer>\r\n);\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header/Header';\r\nimport QuoteBox from './components/QuoteBox/QuoteBox';\r\nimport Theme from './components/Theme/Theme';\r\nimport Footer from './components/Footer/Footer';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    isFetching: false,\r\n    quote: {\r\n      text: '',\r\n      author: ''\r\n    },\r\n    error: false,\r\n    theme: '#3498db'\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getNewQuote();\r\n  }\r\n\r\n  getNewQuote = () => {\r\n    this.setState({\r\n      isFetching: !this.state.isFetching,\r\n      error: false\r\n    });\r\n\r\n    fetch(\r\n      'https://cors-anywhere.herokuapp.com/https://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en'\r\n    )\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        const { quoteAuthor, quoteText } = data;\r\n        const quote = {\r\n          text: quoteText,\r\n          author: quoteAuthor || 'Unknown'\r\n        };\r\n        this.setState({\r\n          isFetching: !this.state.isFetching,\r\n          quote\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        this.setState({\r\n          error: true,\r\n          isFetching: !this.state.isFetching\r\n        });\r\n      });\r\n  };\r\n\r\n  handleThemeColor = color => {\r\n    this.setState({\r\n      theme: color\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { isFetching, quote, error, theme } = this.state;\r\n\r\n    return (\r\n      <Theme theme={theme}>\r\n        <div className=\"container\">\r\n          <Header title=\"Random Quote Machine\" />\r\n          <div id=\"quote-box\">\r\n            <QuoteBox\r\n              quote={quote}\r\n              onNewQuote={this.getNewQuote}\r\n              isFetching={isFetching}\r\n              isError={error}\r\n              onChangeTheme={this.handleThemeColor}\r\n              activeTheme={theme}\r\n            />\r\n          </div>\r\n          <Footer />\r\n        </div>\r\n      </Theme>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}